#cloud-config

packages:
  - git
  - curl
  - gnupg
  - software-properties-common
  - apt-transport-https
  - ca-certificates
  - gpg
  - lsb-release
  - nginx
  - fail2ban
  - python3-virtualenv
  - apache2-utils
  - gettext

package_reboot_if_required: false
manage_resolv_conf: true

write_files:
  - path: /tmp/setup_nvm.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      export NVM_DIR="/home/ubuntu/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

  - path: /tmp/install_nvm.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
      while [ ! -d /home/ubuntu/.nvm ]; do sleep 1; done;
      . /tmp/setup_nvm.sh
      nvm install 20
      if node --version > /dev/null 2>&1; then
        touch /tmp/nvm_installed
      else
        echo "Failed to install node js"
        exit 1
      fi

  - path: /tmp/py_and_full_stack.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      add-apt-repository -y ppa:deadsnakes/ppa
      apt-get update
      apt-get install -y python3.8 python3.8-distutils python3-pip
      su - ubuntu -c "git clone https://github.com/neurolibre/full-stack-server /home/ubuntu/full-stack-server"
      echo "Cloned full-stack-server"
      chown -R ubuntu:ubuntu /home/ubuntu/full-stack-server
      touch /tmp/py_and_full_stack_completed

  - path: /tmp/setup_venv.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      mkdir -p /home/ubuntu/venv
      cd /home/ubuntu/venv
      virtualenv neurolibre38 --python=/usr/bin/python3.8
      source /home/ubuntu/venv/neurolibre38/bin/activate
      pip3 install --upgrade pip setuptools wheel
      pip3 install -r /home/ubuntu/full-stack-server/api/requirements.txt
      touch /tmp/venv_setup_completed
      deactivate

  - path: /tmp/setup_celery.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      cp /home/ubuntu/full-stack-server/systemd/neurolibre-celery.service /etc/systemd/system/
      cp /home/ubuntu/full-stack-server/systemd/default/celery /etc/default/
      chown ubuntu:ubuntu /etc/default/celery
      chmod 644 /etc/default/celery
      touch /tmp/celery_setup_completed
      echo "Copied over celery systemd files"

  - path: /tmp/setup_server_service.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      echo "Copying neurolibre-${server_flavor}.service to /etc/systemd/system/"
      cp /home/ubuntu/full-stack-server/systemd/neurolibre-${server_flavor}.service /etc/systemd/system/
      cp /home/ubuntu/full-stack-server/systemd/default/neurolibre-server /etc/default/
      chown ubuntu:ubuntu /etc/default/neurolibre-server
      chmod 644 /etc/default/neurolibre-server
      touch /tmp/server_setup_completed
      echo "Server (${server_flavor}) systemd files copied"

  - path: /tmp/setup_nginx.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      echo "NGINX ${server_flavor}"
      sed 's/$${SERVER_SUBDOMAIN}/${server_subdomain}/g; s/$${SERVER_DOMAIN}/${server_domain}/g' /home/ubuntu/full-stack-server/nginx/neurolibre-${server_flavor}.template > /home/ubuntu/neurolibre-${server_flavor}.conf
      cp /home/ubuntu/neurolibre-${server_flavor}.conf /etc/nginx/sites-available/neurolibre-${server_flavor}.conf
      cp /home/ubuntu/full-stack-server/nginx/neurolibre_params /etc/nginx/
      rm -f /etc/nginx/sites-enabled/default
      mkdir -p /var/run/neurolibre
      chmod 770 /var/run/neurolibre
      chown ubuntu:www-data /var/run/neurolibre
      ln -s /etc/nginx/sites-available/neurolibre-${server_flavor}.conf /etc/nginx/sites-enabled/
      mkdir -p /var/run/neurolibre/doc_assets
      cp -r /home/ubuntu/venv/neurolibre38/lib/python3.8/site-packages/flask_apispec/static/ /var/run/neurolibre/doc_assets/flask-apispec
      cp -r /home/ubuntu/full-stack-server/assets /var/run/neurolibre/
      cp -r /home/ubuntu/full-stack-server/fail2ban/* /etc/fail2ban/
      touch /tmp/nginx_setup_completed
      echo "Nginx setup completed successfully"

# Install dockerm configure to use /mnt
# Install redis 
runcmd:
  - echo "127.0.0.1 $(hostname)" | sudo tee -a /etc/hosts
  - mkdir -p ${volume_mount_point} # Mount the volume
  - |
    if [ -z "${use_existing_volume}" ]; then
      if ! blkid "${volume_device}"; then
          mkfs.ext4 "${volume_device}"
      fi
    fi
  - echo "${volume_device} ${volume_mount_point} ext4 defaults 0 2" | tee -a /etc/fstab
  - mkdir -p ${nfs_mnt_dir}
  - chmod 755 ${nfs_mnt_dir}
  - echo "${nfs_server_ip}:${nfs_source_dir}      ${nfs_mnt_dir}      nfs4 rw,noatime,nolock,hard,tcp 0 0" >> /etc/fstab
  - mount -av
  - install -m 0755 -d /etc/apt/keyrings # Install docker
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  - chmod a+r /etc/apt/keyrings/docker.asc
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - VERSION_DOCKER=$(apt-cache madison docker-ce | awk '{ print $3 }' | sort -V | head -n 1)
  - VERSION_CONTAINERD=$(apt-cache madison containerd.io | awk '{ print $3 }' | sort -V | head -n 1)
  - apt install -y containerd.io=$VERSION_CONTAINERD docker-ce=$VERSION_DOCKER docker-ce-cli=$VERSION_DOCKER
  - 'echo "{ \"data-root\": \"/mnt\" }" | tee /etc/docker/daemon.json'
  - systemctl restart docker
  - systemctl restart containerd
  - groupadd docker
  - usermod -aG docker ubuntu
  - newgrp docker
  - curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg   # Install redis
  - chmod 644 /usr/share/keyrings/redis-archive-keyring.gpg
  - echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list
  - apt-get update
  - apt-get install -y redis
  - systemctl enable redis
  - systemctl start redis
  - su - ubuntu -c "/bin/bash /tmp/install_nvm.sh"
  - while [ ! -f /tmp/nvm_installed ]; do sleep 1; done;
  - /bin/bash /tmp/py_and_full_stack.sh
  - while [ ! -f /tmp/py_and_full_stack_completed ]; do sleep 1; done;
  - su - ubuntu -c "/bin/bash /tmp/setup_venv.sh"
  - while [ ! -f /tmp/venv_setup_completed ]; do sleep 1; done;
  - /bin/bash /tmp/setup_nginx.sh
  - while [ ! -f /tmp/nginx_setup_completed ]; do sleep 1; done;
  - /bin/bash /tmp/setup_celery.sh
  - while [ ! -f /tmp/celery_setup_completed ]; do sleep 1; done;
  - /bin/bash /tmp/setup_server_service.sh
  - while [ ! -f /tmp/server_setup_completed ]; do sleep 1; done;
  - echo "${api_password}" | sudo htpasswd -i -c /etc/nginx/.htpasswd "${api_username}"
  - chmod 600 /etc/nginx/.htpasswd
  - touch /tmp/cloud_init_completed

ssh_authorized_keys:
  ${ssh_authorized_keys}

disable_ec2_metadata: true
timezone: "America/Montreal"
output: { all: "| tee -a /var/log/cloud-init-output.log" }
